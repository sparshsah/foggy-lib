"""
Example script to programatically sweep through a codebase and modify code.
Like a more flexible version of Find-and-Replace.
I'm sure there's some clever way to accomplish the same in one line with a regex.

This example looks for all Enum's (including both enum.Enum and special_enum.SpecialEnum),
and marks them as enum.unique (unless they are already marked).

For example:

```
import enum

+++ @enum.unique
class MyEnumUnmarked(enum.Enum):
    RED = "r"
    GREEN = "g"
    BLUE = "b"

@enum.unique
class MyEnumAlreadyMarked(enum.Enum):
    RED = "r"
    GREEN = "g"
    BLUE = "b"
```

```
+++ import enum
import codebase.types.special_enum as special_enum

+++ @enum.unique
class MySpecialEnum(special_enum.SpecialEnum):
    RED = "r"
    GREEN = "g"
    BLUE = "b"
```
"""

import pathlib


# list every python file in the codebase
for obj in pathlib.Path("/path/to/codebase").rglob("*.py"):
    if not obj.is_file():
        continue
    with open(obj, "r") as f:
        rlines = f.readlines()
    if not rlines:
        continue
    # if autogenerated file, skip
    if rlines[0] == "# Generated by codegen.py\n":
        continue
    wlines = []
    for (r, rline) in enumerate(rlines):
        if (
            # skip enums already marked as unique
            # for initial line, will underflow to last line -- don't care
            not rlines[r-1] == "@enum.unique\n"
            and rline.startswith("class ")
        ):
            if rline.endswith("enum.Enum):\n"):
                # in preparation to add the current line, insert the decorator
                wlines.append("@enum.unique\n")
            # the special enum must be handled specially
            if rline.endswith("special_enum.SpecialEnum):\n"):
                # if the file hasn't already imported the stdlib enum package,
                # go to the top and import it
                if "import enum\n" not in wlines:
                    i = wlines.index("import codebase.types.special_enum as special_enum\n")
                    wlines.insert(i, "import enum\n")
                # as above, insert the decorator
                wlines.append("@enum.unique\n")
        # finally, add the current line
        wlines.append(rline)
    with open(obj, "w") as f:
        f.writelines(wlines)
